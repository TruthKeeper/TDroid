apply plugin: 'com.android.application'

apply from: rootProject.ext.baseModuleFile
apply from: rootProject.ext.processorFile
apply from: rootProject.ext.versionFile
//方法数统计
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'auto-register'
autoregister {
    registerInfo = [
            [
                    'scanInterface'           : 'com.tk.tdroid.bridge.IService'
                    , 'codeInsertToClassName' : 'com.tk.tdroid.bridge.ServiceManager'
                    , 'registerMethodName'    : 'register'
                    , 'codeInsertToMethodName': 'init'
                    , 'exclude'               : ['com/tk/tdroid/bridge/domain/.*']
            ],
            [
                    'scanInterface'           : 'com.tk.tdroid.router.IRouterTable'
                    , 'codeInsertToClassName' : 'com.tk.tdroid.router.TRouter'
                    , 'registerMethodName'    : 'register'
                    , 'codeInsertToMethodName': 'init'
                    , 'include'               : [
                    'com.apt.home/.*'
                    , 'com.apt.mine/.*'
            ]
            ]
    ]
}
//读取打包签名
def keystorePropertiesFile = rootProject.file("local.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    //打包签名
    signingConfigs {
        debug {
            storeFile file(keystoreProperties['keystore.debug.path'])
            storePassword keystoreProperties['keystore.debug.password']
            keyAlias keystoreProperties['keystore.debug.alias']
            keyPassword keystoreProperties['keystore.debug.alias_password']
        }
        release {
            storeFile file(keystoreProperties['keystore.release.path'])
            storePassword keystoreProperties['keystore.release.password']
            keyAlias keystoreProperties['keystore.release.alias']
            keyPassword keystoreProperties['keystore.release.alias_password']
        }
    }
    //默认打包名称
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${rootProject.getName()}-${buildType.name}-${releaseTime()}-v${defaultConfig.versionName}-${defaultConfig.versionCode}.apk"
        }
    }
    defaultConfig {
        //构建的维度为 default
//        flavorDimensions "default", "extra"
        javaCompileOptions {
            annotationProcessorOptions {
                //开启EventBus的APT索引(1)
                arguments = [eventBusIndex: defaultConfig.applicationId + '.EventBusIndex']
            }
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [
                    "sample_holder_1": "aaa",
                    "sample_holder_2": "bbb",
            ]
            ext.alwaysUpdateBuildId = false
            aaptOptions.cruncherEnabled = false
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [
                    "sample_holder_1": "111",
                    "sample_holder_2": "222",
            ]
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), rootProject.file("proguard-rules.pro")
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
//        flavor1 {
//            dimension "default"
//            //追加或指定名为 testString 的 string 资源值为Hello TDroid
//            resValue "string", "testString", "Hello TDroid"
//            //追加名为 BuildConfig.testString 的类型为 String 值为Hello TDroid
//            buildConfigField "String", "testString", "\"Hello TDroid\""
//            //追加名为 BuildConfig.testBoolean 的类型为 Boolean 值为true
//            buildConfigField "boolean", "testBoolean", "true"
//            //追加名为 BuildConfig.testInt 的类型为 Int 值为23333
//            buildConfigField "int", "testInt", "23333"
//        }
//        flavor2 {
//            dimension "default"
//        }
//        flavor3 {
//            dimension "extra"
//        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    //依赖的核心
    implementation project(':Library')
    //APT支持
//    annotationProcessor project(':APT')

    //开启EventBus的APT索引(2)
//    annotationProcessor rootProject.ext.dependencies["eventbus-processor"]
    //组件化
    implementation project(':Home')
    implementation project(':Mine')
}
